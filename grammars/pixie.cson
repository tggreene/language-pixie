'scopeName': 'source.pixie'
'fileTypes': [
  'pxi'
  'pixie'
]
'foldingStartMarker': '\\(\\s*$'
'foldingStopMarker': '^\\s*\\)'
'name': 'Pixie'
'patterns': [
  {
    'include': '#comment'
  }
  {
    'include': '#shebang-comment'
  }
  {
    'include': '#quoted-sexp'
  }
  {
    'include': '#sexp'
  }
  {
    'include': '#keyfn'
  }
  {
    'include': '#string'
  }
  {
    'include': '#vector'
  }
  {
    'include': '#set'
  }
  {
    'include': '#map'
  }
  {
    'include': '#regexp'
  }
  {
    'include': '#var'
  }
  {
    'include': '#constants'
  }
  {
    'include': '#dynamic-variables'
  }
  {
    'include': '#metadata'
  }
  {
    'include': '#namespace-symbol'
  }
  {
    'include': '#symbol'
  }
  {
    'include': '#whitespace'
  }
]
'repository':
  'comment':
    'captures':
      '1':
        'name': 'punctuation.definition.comment.pixie'
    'match': '(;).*$'
    'name': 'comment.line.semicolon.pixie'
  'constants':
    'patterns': [
      {
        'match': '(nil)(?=(\\s|\\)|\\]|\\}))'
        'name': 'constant.language.nil.pixie'
      }
      {
        'match': '(true|false)'
        'name': 'constant.language.boolean.pixie'
      }
      {
        'match': '(-?\\d+/\\d+)'
        'name': 'constant.numeric.ratio.pixie'
      }
      {
        'match': '(-?\\d+[rR][0-9a-zA-Z]+)'
        'name': 'constant.numeric.arbitrary-radix.pixie'
      }
      {
        'match': '(-?0[xX][0-9a-fA-F]+)'
        'name': 'constant.numeric.hexadecimal.pixie'
      }
      {
        'match': '(-?0\\d+)'
        'name': 'constant.numeric.octal.pixie'
      }
      {
        'match': '(-?\\d+\\.\\d+([eE][+-]?\\d+)?M)'
        'name': 'constant.numeric.bigdecimal.pixie'
      }
      {
        'match': '(-?\\d+\\.\\d+([eE][+-]?\\d+)?)'
        'name': 'constant.numeric.double.pixie'
      }
      {
        'match': '(-?\\d+N)'
        'name': 'constant.numeric.bigint.pixie'
      }
      {
        'match': '(-?\\d+)'
        'name': 'constant.numeric.long.pixie'
      }
      { # separating the pattern for reuse
        'include': '#keyword'
      }
    ]
  'keyword':
    'match': '(?<=(\\s|\\(|\\[|\\{)):[a-zA-Z0-9\\#\\.\\-\\_\\:\\+\\=\\>\\<\\/\\!\\?\\*]+(?=(\\s|\\)|\\]|\\}|\\,))'
    'name': 'constant.keyword.pixie'
  'keyfn':
    'patterns': [
      {
        'match': '(?<=(\\s|\\(|\\[|\\{))(if(-[-a-z\\?]*)?|when(-[-a-z]*)?|for(-[-a-z]*)?|cond|do|let(-[-a-z\\?]*)?|binding|loop|recur|fn|throw[a-z\\-]*|try|catch|finally|([a-z]*case))(?=(\\s|\\)|\\]|\\}))'
        'name': 'storage.control.pixie'
      }
      {
        'match': '(?<=(\\s|\\(|\\[|\\{))(declare-?|(in-)?ns|import|use|require|load|compile|(def[a-z\\-]*))(?=(\\s|\\)|\\]|\\}))'
        'name': 'keyword.control.pixie'
      }
    ]
  'dynamic-variables':
    'match': '\\*[\\w\\.\\-\\_\\:\\+\\=\\>\\<\\!\\?\\d]+\\*'
    'name': 'meta.symbol.dynamic.pixie'
  'map':
    'begin': '(\\{)'
    'beginCaptures':
      '1':
        'name': 'punctuation.section.map.begin.pixie'
    'end': '(\\}(?=[\\}\\]\\)\\s]*(?:;|$)))|(\\})'
    'endCaptures':
      '1':
        'name': 'punctuation.section.map.end.trailing.pixie'
      '2':
        'name': 'punctuation.section.map.end.pixie'
    'name': 'meta.map.pixie'
    'patterns': [
      {
        'include': '$self'
      }
    ]
  'metadata':
    'patterns': [
      {
        'begin': '(\\^\\{)'
        'beginCaptures':
          '1':
            'name': 'punctuation.section.metadata.map.begin.pixie'
        'end': '(\\}(?=[\\}\\]\\)\\s]*(?:;|$)))|(\\})'
        'endCaptures':
          '1':
            'name': 'punctuation.section.metadata.map.end.trailing.pixie'
          '2':
            'name': 'punctuation.section.metadata.map.end.pixie'
        'name': 'meta.metadata.map.pixie'
        'patterns': [
          {
            'include': '$self'
          }
        ]
      }
      {
        'begin': '(\\^)'
        'end': '(\\s)'
        'name': 'meta.metadata.simple.pixie'
        'patterns': [
          {
            'include': '#keyword'
          }
          {
            'include': '$self'
          }
        ]
      }
    ]
  'quoted-sexp':
    'begin': '([\'``]\\()'
    'beginCaptures':
      '1':
        'name': 'punctuation.section.expression.begin.pixie'
    'end': '(\\))$|(\\)(?=[\\}\\]\\)\\s]*(?:;|$)))|(\\))'
    'endCaptures':
      '1':
        'name': 'punctuation.section.expression.end.trailing.pixie'
      '2':
        'name': 'punctuation.section.expression.end.trailing.pixie'
      '3':
        'name': 'punctuation.section.expression.end.pixie'
    'name': 'meta.quoted-expression.pixie'
    'patterns': [
      {
        'include': '$self'
      }
    ]
  'regexp':
    'begin': '#\\"'
    'end': '\\"'
    'name': 'string.regexp.pixie'
    'patterns': [
      {
        'include': '#regexp_escaped_char'
      }
    ]
  'regexp_escaped_char':
    'match': '\\\\(\\")'
    'name': 'string.regexp.pixie'
  'set':
    'begin': '(\\#\\{)'
    'beginCaptures':
      '1':
        'name': 'punctuation.section.set.begin.pixie'
    'end': '(\\}(?=[\\}\\]\\)\\s]*(?:;|$)))|(\\})'
    'endCaptures':
      '1':
        'name': 'punctuation.section.set.end.trailing.pixie'
      '2':
        'name': 'punctuation.section.set.end.pixie'
    'name': 'meta.set.pixie'
    'patterns': [
      {
        'include': '$self'
      }
    ]
  'sexp':
    'begin': '(\\()'
    'beginCaptures':
      '1':
        'name': 'punctuation.section.expression.begin.pixie'
    'end': '(\\))$|(\\)(?=[\\}\\]\\)\\s]*(?:;|$)))|(\\))'
    'endCaptures':
      '1':
        'name': 'punctuation.section.expression.end.trailing.pixie'
      '2':
        'name': 'punctuation.section.expression.end.trailing.pixie'
      '3':
        'name': 'punctuation.section.expression.end.pixie'
    'name': 'meta.expression.pixie'
    'patterns': [
      {
        'begin': '(?<=\\()(ns|def|def-|defn|defn-|defvar|defvar-|defmacro|defmacro-|deftest)\\s+'
        'beginCaptures':
          '1':
            'name': 'keyword.control.pixie'
        'end': '(?=\\))'
        'name': 'meta.definition.global.pixie'
        'patterns': [
          {
            # there may be some metadata before an actual definition
            'include': '#metadata'
          }
          { # dynamic variables are rendered diferently
            'include': '#dynamic-variables'
          }
          {
            # recognizing a symbol as being defined here
            # copied and pasted from #symbol, screw it
            'match': '([\\w\\.\\-\\_\\:\\+\\=\\>\\<\\!\\?\\*][\\w\\.\\-\\_\\:\\+\\=\\>\\<\\!\\?\\*\\d]+)'
            'name': 'entity.global.pixie'
          }
          {
            'include': '$self'
          }
        ]
      }
      {
        'include': '#keyfn'
      }
      {
        'include': '#constants'
      }
      {
        'include': '#vector'
      }
      {
        'include': '#map'
      }
      {
        'include': '#sexp'
      }
      {
        'match': '(?<=\\()(.+?)(?=\\s|\\))'
        'captures':
          '1':
            'name': 'entity.name.function.pixie'
        'patterns': [
          {
            'include': '$self'
          }
        ]
      }
      {
        'include': '$self'
      }
    ]
  'shebang-comment':
    'captures':
      '1':
        'name': 'punctuation.definition.comment.shebang.pixie'
    'match': '^(\\#!).*$'
    'name': 'comment.line.semicolon.pixie'
  'string':
    'begin': '(?<!\\\\)(")'
    'beginCaptures':
      '1':
        'name': 'punctuation.definition.string.begin.pixie'
    'end': '(")'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.string.end.pixie'
    'name': 'string.quoted.double.pixie'
    'patterns': [
      {
        'match': '\\\\.'
        'name': 'constant.character.escape.pixie'
      }
    ]
  'namespace-symbol':
    'patterns': [
      { # copied from #symbol, plus a / at the end. Matches the "app/" part of
        # "app/*config*"
        'match': '([\\w\\.\\-\\_\\:\\+\\=\\>\\<\\!\\?\\*][\\w\\.\\-\\_\\:\\+\\=\\>\\<\\!\\?\\*\\d]+)/'
        'captures':
          '1':
            'name': 'meta.symbol.namespace.pixie'
      }
    ]
  'symbol':
    'patterns': [
      {
        'match': '([\\w\\.\\-\\_\\:\\+\\=\\>\\<\\!\\?\\*][\\w\\.\\-\\_\\:\\+\\=\\>\\<\\!\\?\\*\\d]+)'
        'name': 'meta.symbol.pixie'
      }
    ]
  'var':
    'match': '(?<=(\\s|\\(|\\[|\\{)\\#)\'[a-zA-Z0-9\\.\\-\\_\\:\\+\\=\\>\\<\\/\\!\\?\\*]+(?=(\\s|\\)|\\]|\\}))'
    'name': 'meta.var.pixie'
  'vector':
    'begin': '(\\[)'
    'beginCaptures':
      '1':
        'name': 'punctuation.section.vector.begin.pixie'
    'end': '(\\](?=[\\}\\]\\)\\s]*(?:;|$)))|(\\])'
    'endCaptures':
      '1':
        'name': 'punctuation.section.vector.end.trailing.pixie'
      '2':
        'name': 'punctuation.section.vector.end.pixie'
    'name': 'meta.vector.pixie'
    'patterns': [
      {
        'include': '$self'
      }
    ]
  'whitespace':
    'match': '\\s+$'
    'name': 'invalid.trailing-whitespace'
